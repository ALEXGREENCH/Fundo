package com.szkct.weloopbtsmartdevice.data.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.szkct.weloopbtsmartdevice.data.greendao.SleepData;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SLEEP.
*/
public class SleepDataDao extends AbstractDao<SleepData, Long> {

    public static final String TABLENAME = "SLEEP";    // 睡眠表

    /**
     * Properties of entity SleepData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mac = new Property(1, String.class, "mac", false, "MAC");
        public final static Property Mid = new Property(2, String.class, "mid", false, "MID");
        public final static Property Starttimes = new Property(3, String.class, "starttimes", false, "STARTTIMES");  //开始时间 ， 睡眠数据保存时 保存的是日期格式，主页面显示睡眠数据时用到（但睡眠报告页面需要用到时间戳）
        public final static Property EndTime = new Property(4, String.class, "endtime", false, "ENDTIME");
        public final static Property Sleepmillisecond = new Property(5, String.class, "sleepmillisecond", false, "SLEEPMILLISECOND");
        public final static Property Date = new Property(6, String.class, "date", false, "DATE");
        public final static Property Deepsleep = new Property(7, String.class, "deepsleep", false, "DEEPSLEEP");
        public final static Property Lightsleep = new Property(8, String.class, "lightsleep", false, "LIGHTSLEEP");
        public final static Property Autosleep = new Property(9, String.class, "autosleep", false, "AUTOSLEEP");
        public final static Property Sleeptype = new Property(10, String.class, "sleeptype", false, "SLEEPTYPE");

    };



    public SleepDataDao(DaoConfig config) {
        super(config);
    }
    
    public SleepDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SLEEP' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MAC' TEXT NOT NULL ," + // 1: mac
                "'MID' TEXT NOT NULL ," + // 2: mid
                "'STARTTIMES' TEXT NOT NULL ," + // 3: starttimes
                "'ENDTIME' TEXT NOT NULL ," + // 4: endTime
                "'SLEEPMILLISECOND' TEXT NOT NULL ," + // 5: sleepmillisecond
                "'DATE' TEXT NOT NULL ," + // 6: data
                "'DEEPSLEEP' TEXT NOT NULL ," + // 7: deepsleep
                "'LIGHTSLEEP' TEXT NOT NULL ," + // 8: lightsleep
                "'AUTOSLEEP' TEXT NOT NULL ," + // 9: autosleep
                "'SLEEPTYPE' TEXT NOT NULL );"); // 10: sleeptype
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SLEEP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SleepData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMac());
        stmt.bindString(3, entity.getMid());
        stmt.bindString(4, entity.getStarttimes());
        stmt.bindString(5, entity.getEndTime());
        stmt.bindString(6, entity.getSleepmillisecond());
        stmt.bindString(7, entity.getDate());
        stmt.bindString(8, entity.getDeepsleep());
        stmt.bindString(9, entity.getLightsleep());
        stmt.bindString(10, entity.getAutosleep());
        stmt.bindString(11, entity.getSleeptype());

    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SleepData readEntity(Cursor cursor, int offset) {
        SleepData entity = new SleepData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // mac
            cursor.getString(offset + 2), // mid
            cursor.getString(offset + 3), // starttimes
            cursor.getString(offset + 4), // endTime
            cursor.getString(offset + 5), // sleepmillisecond
            cursor.getString(offset + 6), // data
                cursor.getString(offset + 7), // deepsleep
                cursor.getString(offset + 8), // lightsleep
                cursor.getString(offset + 9), // autosleep
            cursor.getString(offset + 10) // sleeptype
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SleepData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMac(cursor.getString(offset + 1));
        entity.setMid(cursor.getString(offset + 2));
        entity.setStarttimes(cursor.getString(offset + 3));
        entity.setEndTime(cursor.getString(offset + 4));
        entity.setSleepmillisecond(cursor.getString(offset + 5));

        entity.setDate(cursor.getString(offset + 6));
        entity.setDeepsleep(cursor.getString(offset + 7));
        entity.setLightsleep(cursor.getString(offset + 8));
        entity.setAutosleep(cursor.getString(offset + 9));
        entity.setSleeptype(cursor.getString(offset + 10));
     }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SleepData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SleepData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
