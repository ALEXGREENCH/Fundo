package com.szkct.weloopbtsmartdevice.data.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.szkct.weloopbtsmartdevice.data.WatchInfoData;
import com.szkct.weloopbtsmartdevice.data.greendao.RunData;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table RUN.
 */
public class WatchInfoDataDao extends AbstractDao<WatchInfoData, Long> {

    public static final String TABLENAME = "WATCHINFO";   // 型号适配表

    /**
     * Properties of entity RunData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property qrcodenotice = new Property(1, String.class, "qrcodenotice", false, "qrcodenotice");  //二维码推送
        public final static Property wechatSport = new Property(2, String.class, "wechatSport", false, "wechatSport");     //微信运动
        public final static Property autoheart = new Property(3, String.class, "autoheart", false, "autoheart");           //心率自动检测
        public final static Property appnotice = new Property(4, String.class, "appnotice", false, "appnotice");           //消息推送
        public final static Property callnotice = new Property(5, String.class, "callnotice", false, "callnotice");        //来电提醒
        public final static Property platform = new Property(6, String.class, "platform", false, "platform");              //平台
        public final static Property smartphoto = new Property(7, String.class, "smartphoto", false, "smartphoto");        //智能拍照
        public final static Property number = new Property(8, String.class, "number", false, "number");                    //序号
        public final static Property weathernotice = new Property(9, String.class, "weathernotice", false, "weathernotice");//天气推送
        public final static Property remindMode = new Property(10, String.class, "remindMode", false, "remindMode");       //提醒模式（亮屏，震动，亮屏+震动）
        public final static Property model = new Property(11, String.class, "model", false, "model");                      //设备型号
        public final static Property oxygen = new Property(12, String.class, "oxygen", false, "oxygen");                   //血氧
        public final static Property smartalarm = new Property(13, String.class, "smartalarm", false, "smartalarm");       //智能闹钟
        public final static Property smsnotice = new Property(14, String.class, "smsnotice", false, "smsnotice");          //短信提醒
        public final static Property sports = new Property(15, String.class, "sports", false, "sports");                   //运动
        public final static Property meteorology = new Property(16, String.class, "meteorology", false, "meteorology");    //气象指数
        public final static Property firware = new Property(17, String.class, "firware", false, "firware");                //固件升级
        public final static Property longsit = new Property(18, String.class, "longsit", false, "longsit");                //久坐提醒
        public final static Property blood = new Property(19, String.class, "blood", false, "blood");                      //血压
        public final static Property heart = new Property(20, String.class, "heart", false, "heart");                      //心率
        public final static Property watchnotice = new Property(21, String.class, "watchnotice", false, "watchnotice");    //表盘推送
        public final static Property drinknotice = new Property(22, String.class, "drinknotice", false, "drinknotice");    //喝水提醒
        public final static Property nodisturb = new Property(23, String.class, "nodisturb", false, "nodisturb");          //勿扰模式
        public final static Property raisingbright = new Property(24, String.class, "raisingbright", false, "raisingbright"); //抬手亮屏
        public final static Property btcall = new Property(25, String.class, "btcall", false, "btcall");                   //蓝牙通话
        public final static Property board = new Property(26, String.class, "board", false, "board");                      //主板
        public final static Property update_time = new Property(27, String.class, "update_time", false, "update_time");    //数据库更新时间
        public final static Property times = new Property(28, String.class, "times", false, "times");                      //服务器更新时间
        public final static Property unitSetup = new Property(29, String.class, "unitSetup", false, "unitSetup");          //单位设置
        public final static Property pointerCalibration = new Property(30, String.class, "pointerCalibration", false, "pointerCalibration");          //指针校准
        public final static Property sleep = new Property(31, String.class, "sleeps", false, "sleeps");                      //睡眠
        public final static Property sos = new Property(32, String.class, "sos", false, "sos");                //SOS紧急拨号
        public final static Property assistInput = new Property(33, String.class, "assistInput", false, "assistInput");             //协助输入
		 public final static Property faPiao = new Property(34, String.class, "faPiao", false, "faPiao");          //发票      TODO ---- MTK加入下面2个属性
        public final static Property shouKuanewm = new Property(35, String.class, "shouKuanewm", false, "shouKuanewm"); //收款二维码
        public final static Property bluetoothMusic = new Property(36, String.class, "bluetoothMusic", false, "bluetoothMusic"); // 蓝牙音乐
        public final static Property ecg = new Property(37, String.class, "ecg", false, "ecg"); // 蓝牙音乐
        public final static Property bodyTemperature = new Property(38, String.class, "bodyTemperature", false, "bodyTemperature"); // 蓝牙音乐
    }

    ;


    public WatchInfoDataDao(DaoConfig config) {
        super(config);
    }

    public WatchInfoDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'WATCHINFO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'qrcodenotice' TEXT NOT NULL ," + // 1: qrcodenotice
                "'wechatSport' TEXT NOT NULL ," + // 2: wechatSport
                "'autoheart' TEXT NOT NULL ," + // 5: autoheart
                "'appnotice' TEXT NOT NULL ," + // 6: appnotice
                "'callnotice' TEXT NOT NULL ," + // 7: callnotice
                "'platform' TEXT NOT NULL ," + // 8: platform
                "'smartphoto' TEXT NOT NULL ," + // 9: smartphoto
                "'number' TEXT NOT NULL ," + // 4: number
                "'weathernotice' TEXT NOT NULL ," + // 10: weathernotice
                "'remindMode' TEXT NOT NULL ," + // 11: remindMode
                "'model' TEXT NOT NULL ," + // 12: model
                "'oxygen' TEXT NOT NULL ," + // 13: oxygen
                "'smartalarm' TEXT NOT NULL ," + // 14: smartalarm
                "'smsnotice' TEXT NOT NULL ," + // 15: smsnotice
                "'sports' TEXT NOT NULL ," + // 16: sports
                "'meteorology' TEXT NOT NULL ," + // 17: meteorology
                "'firware' TEXT NOT NULL ," + // 18: firware
                "'longsit' TEXT NOT NULL ," + // 19: longsit
                "'blood' TEXT NOT NULL ," + // 20: blood
                "'heart' TEXT NOT NULL ," + // 21: heart
                "'watchnotice' TEXT NOT NULL ," + // 22: watchnotice
                "'drinknotice' TEXT NOT NULL ," + // 23: drinknotice
                "'nodisturb' TEXT NOT NULL ," + // 24: nodisturb
                "'raisingbright' TEXT NOT NULL ," + // 25: raisingbright
                "'btcall' TEXT NOT NULL ," + // 26: btcall
                "'board' TEXT NOT NULL ," + // 27: board
                "'update_time' TEXT NOT NULL ," + // 28: update_time
                "'times' TEXT NOT NULL ," + // 29: times
                "'unitSetup' TEXT NOT NULL  ," +  // 30: unitSetup
                "'pointerCalibration'," +  // 31: pointerCalibration
                "'sleeps'," +  // 32: sleep
                "'sos'," +  // 33: sosCall
                "'assistInput'," +         // 34: assistantInput
				 "'faPiao'," +  // 32: sleep
                "'shouKuanewm'," +
                "'bluetoothMusic'," +
                "'ecg'," +
                "'bodyTemperature');"); // 32:      faPiao
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WATCHINFO'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, WatchInfoData entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getQrcodenotice());
        stmt.bindString(3, entity.getWechatSport());
        stmt.bindString(4, entity.getAutoheart());
        stmt.bindString(5, entity.getAppnotice());
        stmt.bindString(6, entity.getCallnotice());
        stmt.bindString(7, entity.getPlatform());
        stmt.bindString(8, entity.getSmartphoto());
        stmt.bindString(9, entity.getNumber());
        stmt.bindString(10, entity.getWeathernotice());
        stmt.bindString(11, entity.getRemindMode());
        stmt.bindString(12, entity.getModel());
        stmt.bindString(13, entity.getOxygen());
        stmt.bindString(14, entity.getSmartalarm());
        stmt.bindString(15, entity.getSmsnotice());
        stmt.bindString(16, entity.getSports());
        stmt.bindString(17, entity.getMeteorology());
        stmt.bindString(18, entity.getFirware());
        stmt.bindString(19, entity.getLongsit());
        stmt.bindString(20, entity.getBlood());
        stmt.bindString(21, entity.getHeart());
        stmt.bindString(22, entity.getWatchnotice());
        stmt.bindString(23, entity.getDrinknotice());
        stmt.bindString(24, entity.getNodisturb());
        stmt.bindString(25, entity.getRaisingbright());
        stmt.bindString(26, entity.getBtcall());
        stmt.bindString(27, entity.getBoard());
        stmt.bindString(28, entity.getUpdate_time());
        stmt.bindString(29, entity.getTimes());
        stmt.bindString(30, entity.getUnitSetup());
        stmt.bindString(31, entity.getPointerCalibration());
        stmt.bindString(32, entity.getSleep());
        stmt.bindString(33, entity.getSos());
        stmt.bindString(34, entity.getAssistInput());
		 stmt.bindString(35, entity.getFaPiao());
        stmt.bindString(36, entity.getShouKuanewm());
        stmt.bindString(37, entity.getBluetoothMusic());
        stmt.bindString(38, entity.getEcg());
        stmt.bindString(39, entity.getBodyTemperature());
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public WatchInfoData readEntity(Cursor cursor, int offset) {
        WatchInfoData entity = new WatchInfoData( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1),
                cursor.getString(offset + 2),
                cursor.getString(offset + 3),
                cursor.getString(offset + 4),
                cursor.getString(offset + 5),
                cursor.getString(offset + 6),
                cursor.getString(offset + 7),
                cursor.getString(offset + 8),
                cursor.getString(offset + 9),
                cursor.getString(offset + 10),
                cursor.getString(offset + 11),
                cursor.getString(offset + 12),
                cursor.getString(offset + 13),
                cursor.getString(offset + 14),
                cursor.getString(offset + 15),
                cursor.getString(offset + 16),
                cursor.getString(offset + 17),
                cursor.getString(offset + 18),
                cursor.getString(offset + 19),
                cursor.getString(offset + 20),
                cursor.getString(offset + 21),
                cursor.getString(offset + 22),
                cursor.getString(offset + 23),
                cursor.getString(offset + 24),
                cursor.getString(offset + 25),
                cursor.getString(offset + 26),
                cursor.getString(offset + 27),
                cursor.getString(offset + 28),
                cursor.getString(offset + 29),
                cursor.getString(offset + 30),
                cursor.getString(offset + 31),
                cursor.getString(offset + 32),
                cursor.getString(offset + 33),
                cursor.getString(offset + 34),
                cursor.getString(offset + 35),
                cursor.getString(offset + 36),
                cursor.getString(offset + 37),
                cursor.getString(offset + 38)
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, WatchInfoData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQrcodenotice(cursor.getString(offset + 1));
        entity.setWechatSport(cursor.getString(offset + 2));
        entity.setAutoheart(cursor.getString(offset + 3));
        entity.setAppnotice(cursor.getString(offset + 4));
        entity.setCallnotice(cursor.getString(offset + 5));
        entity.setPlatform(cursor.getString(offset + 6));
        entity.setSmartphoto(cursor.getString(offset + 7));
        entity.setNumber(cursor.getString(offset + 8));
        entity.setWeathernotice(cursor.getString(offset + 9));
        entity.setRemindMode(cursor.getString(offset + 10));
        entity.setModel(cursor.getString(offset + 11));
        entity.setOxygen(cursor.getString(offset + 12));
        entity.setSmartalarm(cursor.getString(offset + 13));
        entity.setSmsnotice(cursor.getString(offset + 14));
        entity.setSports(cursor.getString(offset + 15));
        entity.setMeteorology(cursor.getString(offset + 16));
        entity.setFirware(cursor.getString(offset + 17));
        entity.setLongsit(cursor.getString(offset + 18));
        entity.setBlood(cursor.getString(offset + 19));
        entity.setHeart(cursor.getString(offset + 20));
        entity.setWatchnotice(cursor.getString(offset + 21));
        entity.setDrinknotice(cursor.getString(offset + 22));
        entity.setNodisturb(cursor.getString(offset + 23));
        entity.setRaisingbright(cursor.getString(offset + 24));
        entity.setBtcall(cursor.getString(offset + 25));
        entity.setBoard(cursor.getString(offset + 26));
        entity.setUpdate_time(cursor.getString(offset + 27));
        entity.setTimes(cursor.getString(offset + 28));
        entity.setUnitSetup(cursor.getString(offset + 29));
        entity.setPointerCalibration(cursor.getString(offset + 30));
        entity.setSleep(cursor.getString(offset + 31));
        entity.setSos(cursor.getString(offset + 32));
        entity.setAssistInput(cursor.getString(offset + 33));
		 entity.setFaPiao(cursor.getString(offset + 34));
        entity.setShouKuanewm(cursor.getString(offset + 35));
        entity.setBluetoothMusic(cursor.getString(offset + 36));
        entity.setEcg(cursor.getString(offset + 37));
        entity.setBodyTemperature(cursor.getString(offset + 38));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(WatchInfoData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(WatchInfoData entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
