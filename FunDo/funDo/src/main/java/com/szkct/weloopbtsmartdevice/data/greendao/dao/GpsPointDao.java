package com.szkct.weloopbtsmartdevice.data.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.szkct.weloopbtsmartdevice.data.greendao.GpsPointData;


import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table GpsPoint.
 */
public class GpsPointDao extends AbstractDao<GpsPointData, Long> {

    public static final String TABLENAME = "GpsPoint";     // GPS定位信息

//    /** Not-null value. */
//    private String arrLat;
//    /** Not-null value. */
//    private String arrLng;
//    /** Not-null value. */
//    private String arrSpeed;
//    /** Not-null value. */
//    private String arrBuPing;
//    /** 时间戳. */
//    private String timeMillis;

    /**
     * Properties of entity HearData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mac = new Property(1, String.class, "mac", false, "MAC");
        public final static Property Mid = new Property(2, String.class, "mid", false, "MID");
        public final static Property ArrLat = new Property(3, String.class, "arrlat", false, "ARRLAT");
        public final static Property ArrLng = new Property(4, String.class, "arrlng", false, "ARRLNG");
        public final static Property ArrSpeed = new Property(5, String.class, "arrspeed", false, "ARRSPEED");
        public final static Property ArrBuPing = new Property(6, String.class, "arrbuping", false, "ARRBUPING");
        public final static Property ArrAltitude = new Property(7, String.class, "arrAltitude", false, "ARRALTITUDE");
        public final static Property TimeMillis = new Property(8, String.class, "timemillis", false, "TIMEMILLIS");
        public final static Property BufuList = new Property(9, String.class, "bufuList", false, "BUFULIST");
//        public final static Property Speed = new Property(8, String.class, "speed", false, "SPEED");
//        public final static Property SportTime = new Property(9, String.class, "sportTime", false, "SPORT_TIME");
//        public final static Property Calorie = new Property(10, String.class, "calorie", false, "CALORIE");
//        public final static Property Stime = new Property(11, String.class, "sTime", false, "S_TIME");
    };


    public GpsPointDao(DaoConfig config) {
        super(config);
    }

    public GpsPointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GpsPoint' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MAC' TEXT NOT NULL ," + // 1: mac
                "'MID' TEXT NOT NULL ," + // 2: mid
                "'ARRLAT' TEXT NOT NULL ," + // 3: LAT
                "'ARRLNG' TEXT NOT NULL ," + // 4: LON
                "'ARRSPEED' TEXT NOT NULL ," + // 5: MILE
                "'ARRBUPING' TEXT NOT NULL ," + // 6: ELE
                "'ARRALTITUDE' TEXT NOT NULL ," + // 6: ELE
                "'TIMEMILLIS' TEXT NOT NULL ," + // 7: DATE
                "'BUFULIST' TEXT NOT NULL);"); // 7: DATE
//                "'SPEED' TEXT NOT NULL ," + // 8: SPEED
//                "'SPORT_TIME' TEXT NOT NULL ," +// 9: SPORT_TIME
//                "'CALORIE' TEXT NOT NULL ," +// 10: CALORIE
//                "'S_TIME' TEXT NOT NULL );"); // 11: S_TIME
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GpsPoint'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GpsPointData entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMac());
        stmt.bindString(3, entity.getMid());
        stmt.bindString(4, entity.getArrLat());
        stmt.bindString(5, entity.getArrLon());
        stmt.bindString(6, entity.getArrSpeed());
        stmt.bindString(7, entity.getArrBuPing());
        stmt.bindString(8, entity.getArrAltitude());
        stmt.bindString(9, entity.getTimeMillis());
        stmt.bindString(10, entity.getBufuList());
//        stmt.bindString(9, entity.getSpeed());
//        stmt.bindString(10, entity.getSportTime());
//        stmt.bindString(11, entity.getCalorie());
//        stmt.bindString(12, entity.getsTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public GpsPointData readEntity(Cursor cursor, int offset) {
        GpsPointData entity = new GpsPointData( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // mac
                cursor.getString(offset + 2), // mid
                cursor.getString(offset + 3), // upload
                cursor.getString(offset + 4), // times
                cursor.getString(offset + 5), // binTime
                cursor.getString(offset + 6), // date
                cursor.getString(offset + 7), // hour
                cursor.getString(offset + 8), // hour
                cursor.getString(offset + 9) // hour
//                cursor.getString(offset + 8), // heartbeat
//                cursor.getString(offset + 9), // heartbeat
//                cursor.getString(offset + 10), // heartbeat
//                cursor.getString(offset + 11) // data
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GpsPointData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMac(cursor.getString(offset + 1));
        entity.setMid(cursor.getString(offset + 2));
        entity.setArrLat(cursor.getString(offset + 3));
        entity.setArrLon(cursor.getString(offset + 4));
        entity.setArrSpeed(cursor.getString(offset + 5));
        entity.setArrBuPing(cursor.getString(offset + 6));
        entity.setArrAltitude(cursor.getString(offset + 7));
        entity.setTimeMillis(cursor.getString(offset + 8));
        entity.setBufuList(cursor.getString(offset + 9));
//        entity.setSpeed(cursor.getString(offset + 8));
//        entity.setSportTime(cursor.getString(offset + 9));
//        entity.setCalorie(cursor.getString(offset + 10));
//        entity.setsTime(cursor.getString(offset + 11));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GpsPointData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(GpsPointData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
