package com.szkct.weloopbtsmartdevice.data.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.szkct.weloopbtsmartdevice.data.greendao.HearData;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HEART.
*/
public class HearDataDao extends AbstractDao<HearData, Long> {

    public static final String TABLENAME = "HEART";   // 心跳表

    /**
     * Properties of entity HearData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mac = new Property(1, String.class, "mac", false, "MAC");
        public final static Property Mid = new Property(2, String.class, "mid", false, "MID");
        public final static Property Upload = new Property(3, String.class, "upload", false, "UPLOAD");
        public final static Property Times = new Property(4, String.class, "times", false, "TIMES");
        public final static Property BinTime = new Property(5, String.class, "binTime", false, "BIN_TIME");
        public final static Property Date = new Property(6, String.class, "date", false, "DATE");
        public final static Property Hour = new Property(7, String.class, "hour", false, "HOUR");
        public final static Property Heartbeat = new Property(8, String.class, "heartbeat", false, "HEARTBEAT");
        public final static Property Data = new Property(9, String.class, "data", false, "DATA");
        public final static Property Maxhata = new Property(10, Integer.class, "maxhata", false, "Maxhata");
        public final static Property Minhata = new Property(11, Integer.class, "minhata", false, "Minhata");
        public final static Property Avghata = new Property(12, Integer.class, "avghata", false, "Avghata");

    };


    public HearDataDao(DaoConfig config) {
        super(config);
    }
    
    public HearDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HEART' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MAC' TEXT NOT NULL ," + // 1: mac
                "'MID' TEXT NOT NULL ," + // 2: mid
                "'UPLOAD' TEXT NOT NULL ," + // 3: upload
                "'TIMES' TEXT NOT NULL ," + // 4: times
                "'BIN_TIME' TEXT NOT NULL ," + // 5: binTime
                "'DATE' TEXT NOT NULL ," + // 6: date
                "'HOUR' TEXT NOT NULL ," + // 7: hour
                "'HEARTBEAT' TEXT NOT NULL ," + // 8: heartbeat
                 "'DATA' TEXT NOT NULL ,"+//9
                "'Maxhata' TEXT NOT NULL ," + // 10
                "'Minhata' TEXT NOT NULL ," + // 11
                "'Avghata' TEXT NOT NULL);"); // 12
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HEART'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HearData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMac());
        stmt.bindString(3, entity.getMid());
        stmt.bindString(4, entity.getUpload());
        stmt.bindString(5, entity.getTimes());
        stmt.bindString(6, entity.getBinTime());
        stmt.bindString(7, entity.getDate());
        stmt.bindString(8, entity.getHour());
        stmt.bindString(9, entity.getHeartbeat());
        stmt.bindString(10, entity.getData());

        stmt.bindString(11, entity.getHigt_hata());
        stmt.bindString(12, entity.getLow_hata());
        stmt.bindString(13, entity.getAvg_hata());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HearData readEntity(Cursor cursor, int offset) {
        HearData entity = new HearData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // mac
            cursor.getString(offset + 2), // mid
            cursor.getString(offset + 3), // upload
            cursor.getString(offset + 4), // times
            cursor.getString(offset + 5), // binTime
            cursor.getString(offset + 6), // date
            cursor.getString(offset + 7), // hour
            cursor.getString(offset + 8), // heartbeat
            cursor.getString(offset + 9), // data
            cursor.getString(offset + 10), // heighata
            cursor.getString(offset + 11), //lowhat
            cursor.getString(offset + 12)// avghata

        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HearData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMac(cursor.getString(offset + 1));
        entity.setMid(cursor.getString(offset + 2));
        entity.setUpload(cursor.getString(offset + 3));
        entity.setTimes(cursor.getString(offset + 4));
        entity.setBinTime(cursor.getString(offset + 5));
        entity.setDate(cursor.getString(offset + 6));
        entity.setHour(cursor.getString(offset + 7));
        entity.setHeartbeat(cursor.getString(offset + 8));
        entity.setData(cursor.getString(offset + 9));
        entity.setHigt_hata(cursor.getString(offset + 10));
        entity.setLow_hata(cursor.getString(offset + 11));
        entity.setAvg_hata(cursor.getString(offset + 12));



     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HearData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HearData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
