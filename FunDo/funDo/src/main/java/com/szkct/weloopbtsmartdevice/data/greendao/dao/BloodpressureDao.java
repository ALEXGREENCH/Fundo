package com.szkct.weloopbtsmartdevice.data.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.szkct.weloopbtsmartdevice.data.greendao.Bloodpressure;
import com.szkct.weloopbtsmartdevice.data.greendao.HearData;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table HEART.
*/
public class BloodpressureDao extends AbstractDao<Bloodpressure, Long> {

    public static final String TABLENAME = "Bloodpressure";    // 睡眠表
    /**
     * Properties of entity HearData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HeightBlood = new Property(1, String.class, "heightBlood", false, "HeightBlood");
        public final static Property MinBlood = new Property(2, String.class, "minBlood", false, "MinBlood");
        public final static Property Hour = new Property(3, String.class, "hour", false, "Hour");
        public final static Property Date = new Property(4, String.class, "date", false, "Date");
        public final static Property Mac = new Property(5, String.class, "mac", false, "Mac");
        public final static Property Conunt = new Property(6, String.class, "Conunt", false, "Conunt");
    };


    public BloodpressureDao(DaoConfig config) {
        super(config);
    }

    public BloodpressureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Bloodpressure' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'HeightBlood' TEXT NOT NULL ," + // 1: HeightBlood
                "'MinBlood' TEXT NOT NULL ," + // 2: MinBlood
                "'Hour' TEXT NOT NULL ," + // 3: Hour
                "'Date' TEXT NOT NULL ," + // 4: Date
                "'Mac' TEXT NOT NULL ," + // 5: Mac
                "'Conunt' TEXT NOT NULL);" // 5: Conunt
                ); // 12
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Bloodpressure'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Bloodpressure entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getHeightBlood());
        stmt.bindString(3, entity.getMinBlood());
        stmt.bindString(4, entity.getHour());
        stmt.bindString(5, entity.getData());
        stmt.bindString(6, entity.getMac());
        stmt.bindString(7, entity.getConunt());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Bloodpressure readEntity(Cursor cursor, int offset) {
        Bloodpressure entity = new Bloodpressure(
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // HeightBlood
            cursor.getString(offset + 2), // MinBlood
            cursor.getString(offset + 3), // Hour
            cursor.getString(offset + 4), // Date
            cursor.getString(offset + 5) ,// Mac
            cursor.getString(offset + 6) // Mac

        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Bloodpressure entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHeightBlood(cursor.getString(offset + 1));
        entity.setMinBlood(cursor.getString(offset + 2));
        entity.setHour(cursor.getString(offset + 3));
        entity.setData(cursor.getString(offset + 4));
        entity.setMac(cursor.getString(offset + 5));
        entity.setConunt(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Bloodpressure entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Bloodpressure entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
